import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../../styles/pages/play/[difficulty].module.scss";
import {
  Cell,
  konaneDifficulties,
  Player,
  BLACK,
  WHITE,
  stringIsPlayer,
} from "../../konane/KonaneUtils";
import { useEffect, useRef, useState } from "react";
import PageModal from "../../components/PageModal/PageModal";

const n = 8;
const emptyBoard = [...Array(n)].map((_) => [...Array(n)]);

const xCellColor = "#ab4e52";
const oCellColor = "white";

interface PlayKonaneProps {
  difficulty: string;
}

const PlayKonane: NextPage<PlayKonaneProps> = ({ difficulty }) => {
  const [player, setPlayer] = useState<Player | null>(null);
  const boardRef = useRef<(HTMLDivElement | null)[][]>(emptyBoard);
  useEffect(() => {
    if (player) {
      console.log(player);
    }
  }, []);

  const handleSetPlayerButtonClick = (
    e: React.MouseEvent<HTMLButtonElement>
  ) => {
    e.preventDefault();
    const { value } = e.currentTarget;
    if (!value) {
      console.log("Something went wrong");
    }
    if (!stringIsPlayer(value)) {
      console.log(`${value} is not of player type`);
    } else {
      // set player
    }
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!player && (
        <PageModal>
          <div className={styles["set-player-modal-content"]}>
            <div className={styles["set-player-modal-prompt-message"]}>
              Choose
            </div>
            <button
              value={WHITE}
              className={styles["set-player-modal-white-button"]}
              onClick={handleSetPlayerButtonClick}
            >
              White
            </button>
            <button
              value={BLACK}
              className={styles["set-player-modal-black-button"]}
              onClick={handleSetPlayerButtonClick}
            >
              Black
            </button>
          </div>
        </PageModal>
      )}
      <div className={styles["konane-board-container"]}>
        {emptyBoard.map((row, rowN) => (
          <div className={styles["konane-board-row"]}>
            {row.map((_, colN) => (
              <div
                className={styles["konane-board-cell"]}
                ref={(el) => (boardRef.current[rowN][colN] = el)}
                style={{
                  background: rowN % 2 === colN % 2 ? xCellColor : oCellColor,
                }}
              >
                <div className={styles["konane-board-cell-content"]}>X</div>
              </div>
            ))}
          </div>
        ))}
      </div>
    </div>
  );
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const difficulty = params?.difficulty;
  return {
    props: {
      difficulty,
    },
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  const paths = Object.keys(konaneDifficulties).map((difficulty) => ({
    params: { difficulty },
  }));
  return { paths, fallback: "blocking" };
};

export default PlayKonane;
