import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../../styles/pages/play/[difficulty].module.scss";
import { Cell, konaneDifficulties, Player } from "../../konane/KonaneUtils";
import { useState } from "react";

const initializeBoard = (): Cell[][] => {
  const n = 8;
  const board = [...Array(n)].map((_) => [...Array(n)]);
  const BLACK = "X";
  const WHITE = "O";
  for (let row = 0; row < n; row++) {
    for (let col = 0; col < n; col++) {
      if (row % 2 === col % 2) {
        board[row][col] = BLACK;
      } else {
        board[row][col] = WHITE;
      }
    }
  }
  return board;
};

const initialBoard = initializeBoard();

const xCellColor = "gray";
const oCellColor = "white";

interface PlayKonaneProps {
  difficulty: string;
}

const PlayKonane: NextPage<PlayKonaneProps> = ({ difficulty }) => {
  const [player, setPlayer] = useState<Player | null>(null);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {difficulty}
    </div>
  );
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const difficulty = params?.difficulty;
  return {
    props: {
      difficulty,
    },
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  const paths = Object.keys(konaneDifficulties).map((difficulty) => ({
    params: { difficulty },
  }));
  return { paths, fallback: "blocking" };
};

export default PlayKonane;
